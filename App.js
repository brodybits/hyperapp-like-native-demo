/**
 * Hyperapp micro rewrite demo on React Native
 *
 * based on code generated by react-native init
 *
 * https://github.com/facebook/react-native
 *
 */

import React from 'react'

import createReactClass from 'create-react-class'

/**
 * Elements supported by react-primitives
 */
import {
  StyleSheet,
  Text,
  TouchableWithoutFeedback as Touchable,
  View
} from 'react-native'

const App = () => (
  <ManagedAppView
    state={{ count: 0 }}
    actions={{
      up: (state) => ({ count: state.count + 1 }),
      dn: (state) => ({ count: state.count - 1 }),
    }}
    effects={{
      up3: (actions, effects) => {
        actions.up()
        setTimeout(effects.up2, 400)
      },
      up2: (actions, effects) => {
        actions.up()
        setTimeout(actions.up, 400)
      },
      dn3: (actions, effects) => {
        actions.dn()
        setTimeout(effects.dn2, 400)
      },
      dn2: (actions, effects) => {
        actions.dn()
        setTimeout(actions.dn, 400)
      },
    }}>
    <MyAppView />
  </ManagedAppView>
)

const MyAppView = ({ state, actions, effects }) => (
  <View style={styles.container}>
    <Text style={styles.welcome}>
      Hyperapp micro rewrite demo on React Native
    </Text>
    <Text>···</Text>
    <MyTouchButton
      style={styles.mybutton}
      onPress={effects.up3}
      title="Up 3"
    />
    <Text>···</Text>
    <MyTouchButton
      style={styles.mybutton}
      onPress={actions.up}
      title="Up (+1)"
    />
    <Text style={styles.welcome}>
      {state.count}
    </Text>
    <MyTouchButton
      style={styles.mybutton}
      onPress={actions.dn}
      title="Down (-1)"
    />
    <Text>···</Text>
    <MyTouchButton
      style={styles.mybutton}
      onPress={effects.dn3}
      title="Down 3"
    />
  </View>
)

const MyTouchButton = (props) => {
  const { onPress, title, ...other } = props

  return (
    <View {...other}>
      <Touchable onPress={onPress}>
        <Text>{title}</Text>
      </Touchable>
    </View>
  )
}

export default App

const ManagedAppView = createReactClass({
  getInitialState () {
    const ac = {}
    const ef = {}
    const self = this
    for (let a in this.props.actions) {
      ac[a] = () => {
        self.setState(prev => ({ ac: ac, st: (this.props.actions[a](prev.st)) }))
      }
    }
    for (let e in this.props.effects) {
      ef[e] = () => {
        this.props.effects[e](ac, ef)
      }
    }
    return { ac: ac, st: this.props.state, ef: ef }
  },
  render () {
    return React.Children.map(this.props.children, ch => (
      React.cloneElement(ch, { state: this.state.st, actions: this.state.ac, effects: this.state.ef })
    ))
  }
})

// from react-native init:
const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  mybutton: {
    alignItems: 'center',
    backgroundColor: '#DDDDDD',
    padding: 10
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
})
